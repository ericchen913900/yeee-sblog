---
const path = Astro.url.pathname;
const isActive = (href: string) => path === href || (href !== '/' && path.startsWith(href));
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Infosec Blog</title>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@600;700;800&family=Source+Sans+3:wght@400;600&family=JetBrains+Mono:wght@400;600&display=swap" rel="stylesheet">
		<link rel="stylesheet" href="https://unpkg.com/github-markdown-css@5.5.0/github-markdown-dark.css">
		<link rel="stylesheet" href="https://unpkg.com/@primer/octicons@19.9.0/build/build.css">
		<link rel="stylesheet" href="/styles/fusion-design.css">

	</head>
	<body>
		<!-- üß≠ Á∞°ÊΩîÁèæ‰ª£ÁöÑÂ∞éËà™ -->
		<header class="header">
			<div class="header-content">
				<a href="/" class="logo">yeee</a>
				<nav class="nav" aria-label="‰∏ªË¶ÅÂ∞éËà™">
					<a class={`nav-link ${isActive('/') ? 'active' : ''}`} href="/">È¶ñÈ†Å</a>
					<a class={`nav-link ${isActive('/about') ? 'active' : ''}`} href="/about">ÈóúÊñº</a>
					<a class={`nav-link ${isActive('/blog') ? 'active' : ''}`} href="/blog">ÊñáÁ´†</a>
				</nav>
			</div>
		</header>
		
		<!-- üìä ÊªæÂãïÈÄ≤Â∫¶ÊåáÁ§∫Âô® -->
		<div class="scroll-indicator">
			<div class="scroll-progress"></div>
		</div>
		<main>
			<slot />
		</main>
		<!-- gradient is pure CSS now; matrix.js removed -->
		<!-- üéØ Áèæ‰ª£ÂåñËÖ≥Êú¨ -->
		<script is:inline>
			// ÊªæÂãïÈÄ≤Â∫¶ÊåáÁ§∫Âô®
			window.addEventListener('scroll', () => {
				const scrolled = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
				const progressBar = document.querySelector('.scroll-progress');
				if (progressBar) {
					progressBar.style.width = scrolled + '%';
				}
			});

			// üåü Á∞°ÊΩîÁöÑËÉåÊôØÊïàÊûú
			function createSubtleBackground() {
				// ‰øùÊåÅÁ∞°ÊΩîÂÑ™ÈõÖÁöÑË®≠Ë®àÔºå‰∏çÊ∑ªÂä†‰ªª‰ΩïËÉåÊôØÁâπÊïà
			}

			// üé≠ ÊªëÂãïÈ°ØÁ§∫ÂãïÁï´
			function handleScrollAnimations() {
				const reveals = document.querySelectorAll('.reveal');
				
				reveals.forEach(reveal => {
					const windowHeight = window.innerHeight;
					const elementTop = reveal.getBoundingClientRect().top;
					const elementVisible = 150;
					
					if (elementTop < windowHeight - elementVisible) {
						reveal.classList.add('active');
					}
				});
			}

			// üéØ ÊäÄËÉΩÈÄ≤Â∫¶Ê¢ùÂãïÁï´
			function animateSkillBars() {
				const skillBars = document.querySelectorAll('.skill-progress-bar');
				
				skillBars.forEach(bar => {
					const rect = bar.getBoundingClientRect();
					if (rect.top < window.innerHeight && rect.bottom > 0) {
						const width = bar.style.width;
						bar.style.width = '0%';
						setTimeout(() => {
							bar.style.width = width;
						}, 500);
					}
				});
			}

			// ÁßªÈô§ÊªëÈº†Ë∑üÈö®ÊïàÊûú‰ª•Êèê‰æõÊõ¥Â•ΩÁöÑÁî®Êà∂È´îÈ©ó

			// üéØ ËøîÂõûÈ†ÇÈÉ®ÊåâÈàï
			function handleBackToTop() {
				const backToTopBtn = document.getElementById('backToTop');
				if (!backToTopBtn) return;

				window.addEventListener('scroll', () => {
					if (window.scrollY > 300) {
						backToTopBtn.style.opacity = '1';
						backToTopBtn.style.visibility = 'visible';
					} else {
						backToTopBtn.style.opacity = '0';
						backToTopBtn.style.visibility = 'hidden';
					}
				});

				backToTopBtn.addEventListener('click', (e) => {
					e.preventDefault();
					window.scrollTo({
						top: 0,
						behavior: 'smooth'
					});
				});
			}

			// üé® ÊâìÂ≠óÊ©üÊïàÊûú
			function typewriterEffect() {
				const typewriters = document.querySelectorAll('.typewriter');
				
				typewriters.forEach(element => {
					const text = element.textContent;
					element.textContent = '';
					element.style.width = '0';
					
					let i = 0;
					const timer = setInterval(() => {
						if (i < text.length) {
							element.textContent += text.charAt(i);
							i++;
						} else {
							clearInterval(timer);
							element.style.borderRight = 'none';
						}
					}, 100);
				});
			}

			// üìñ ÊñáÁ´†ÂäüËÉΩÂ¢ûÂº∑
			function generateTableOfContents() {
				const toc = document.getElementById('tableOfContents');
				if (!toc) return;

				const headings = document.querySelectorAll('.content-wrapper h2, .content-wrapper h3, .content-wrapper h4');
				if (headings.length === 0) return;

				const tocList = document.createElement('ul');
				
				headings.forEach((heading, index) => {
					const id = `heading-${index}`;
					heading.id = id;
					
					const li = document.createElement('li');
					const a = document.createElement('a');
					a.href = `#${id}`;
					a.textContent = heading.textContent;
					a.className = `toc-link toc-${heading.tagName.toLowerCase()}`;
					
					li.appendChild(a);
					tocList.appendChild(li);
				});
				
				toc.appendChild(tocList);
				
				// ÊªæÂãïÈ´ò‰∫ÆÁï∂ÂâçÁ´†ÁØÄ
				window.addEventListener('scroll', updateTocHighlight);
			}

			function updateTocHighlight() {
				const headings = document.querySelectorAll('.content-wrapper h2, .content-wrapper h3, .content-wrapper h4');
				const tocLinks = document.querySelectorAll('.toc-link');
				
				let currentHeading = null;
				
				headings.forEach(heading => {
					const rect = heading.getBoundingClientRect();
					if (rect.top <= 100) {
						currentHeading = heading;
					}
				});
				
				tocLinks.forEach(link => link.classList.remove('active'));
				
				if (currentHeading) {
					const activeLink = document.querySelector(`a[href="#${currentHeading.id}"]`);
					if (activeLink) {
						activeLink.classList.add('active');
					}
				}
			}

			// üìä Èñ±ËÆÄÈÄ≤Â∫¶Ê¢ù
			function updateReadingProgress() {
				const article = document.querySelector('.content-wrapper');
				if (!article) return;

				const scrolled = window.scrollY;
				const articleTop = article.offsetTop;
				const articleHeight = article.offsetHeight;
				const windowHeight = window.innerHeight;
				
				const progress = Math.max(0, Math.min(100, 
					((scrolled - articleTop + windowHeight) / articleHeight) * 100
				));
				
				let progressBar = document.querySelector('.reading-progress-bar');
				if (!progressBar) {
					const progressContainer = document.createElement('div');
					progressContainer.className = 'reading-progress';
					progressBar = document.createElement('div');
					progressBar.className = 'reading-progress-bar';
					progressContainer.appendChild(progressBar);
					document.body.appendChild(progressContainer);
				}
				
				progressBar.style.width = progress + '%';
			}

			// üéØ Ë§áË£ΩÂäüËÉΩ
			function setupCopyButtons() {
				// Ë§áË£ΩÈÄ£Áµê
				const copyLinkBtn = document.getElementById('copyLink');
				if (copyLinkBtn) {
					copyLinkBtn.addEventListener('click', () => {
						navigator.clipboard.writeText(window.location.href);
						showToast('ÈÄ£ÁµêÂ∑≤Ë§áË£ΩÂà∞Ââ™Ë≤ºÊùø');
					});
				}

				// Ë§áË£ΩÁµÇÁ´ØÂÖßÂÆπ
				const copyTerminalBtn = document.getElementById('copyTerminal');
				if (copyTerminalBtn) {
					copyTerminalBtn.addEventListener('click', () => {
						const terminal = copyTerminalBtn.closest('.terminal-panel');
						const content = terminal.querySelector('.terminal-content').textContent;
						navigator.clipboard.writeText(content);
						showToast('ÁµÇÁ´ØÂÖßÂÆπÂ∑≤Ë§áË£Ω');
					});
				}

				// Ë§áË£Ω‰ª£Á¢ºÂ°ä
				document.querySelectorAll('pre').forEach(pre => {
					const copyBtn = document.createElement('button');
					copyBtn.className = 'copy-code-btn';
					copyBtn.innerHTML = `
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none">
							<rect x="9" y="9" width="13" height="13" rx="2" ry="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					`;
					copyBtn.title = 'Ë§áË£Ω‰ª£Á¢º';
					
					copyBtn.addEventListener('click', () => {
						const code = pre.querySelector('code') || pre;
						navigator.clipboard.writeText(code.textContent);
						showToast('‰ª£Á¢ºÂ∑≤Ë§áË£Ω');
					});
					
					pre.style.position = 'relative';
					pre.appendChild(copyBtn);
				});
			}

			// üé® ÊèêÁ§∫Ë®äÊÅØ
			function showToast(message) {
				const toast = document.createElement('div');
				toast.className = 'toast';
				toast.textContent = message;
				document.body.appendChild(toast);
				
				setTimeout(() => {
					toast.classList.add('show');
				}, 100);
				
				setTimeout(() => {
					toast.classList.remove('show');
					setTimeout(() => {
						document.body.removeChild(toast);
					}, 300);
				}, 2000);
			}

			// üéØ ÂàÜ‰∫´ÂäüËÉΩ
			function setupShareButtons() {
				const shareTwitterBtn = document.getElementById('shareTwitter');
				if (shareTwitterBtn) {
					shareTwitterBtn.addEventListener('click', () => {
						const title = document.querySelector('.writeup-title')?.textContent || document.title;
						const url = window.location.href;
						const text = `Ê≠£Âú®Èñ±ËÆÄÔºö${title}`;
						const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
						window.open(twitterUrl, '_blank');
					});
				}
			}

			// üéØ ÂàùÂßãÂåñÊâÄÊúâÊïàÊûú
			document.addEventListener('DOMContentLoaded', () => {
				createSubtleBackground();
				handleBackToTop();
				generateTableOfContents();
				setupCopyButtons();
				setupShareButtons();
				
				// ÊªæÂãï‰∫ã‰ª∂Áõ£ËÅΩ
				window.addEventListener('scroll', () => {
					handleScrollAnimations();
					animateSkillBars();
					updateReadingProgress();
				});
				
				// ÂàùÂßãÊ™¢Êü•ÂèØË¶ãÂÖÉÁ¥†
				handleScrollAnimations();
			});

			// üé® È†ÅÈù¢ËºâÂÖ•ÂãïÁï´
			window.addEventListener('load', () => {
				document.body.classList.add('loaded');
			});
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
